@page "/staff/details"
@using Microsoft.EntityFrameworkCore
@using FSD_Project.Domain
@inject IDbContextFactory<FSD_Project.Data.FSD_ProjectContext> DbFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Roles = "Admin, Staff")]
<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Staff</h2>
    <hr />
    @if (staff is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@staff.Name</dd>
            <dt class="col-sm-2">Gender</dt>
            <dd class="col-sm-10">@staff.Gender</dd>
            <dt class="col-sm-2">BranchId</dt>
            <dd class="col-sm-10">@staff.BranchId</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@staff.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@staff.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@staff.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@staff.UpdatedBy</dd>
        </dl>
        <div>
            <a href="@($"/staff/edit?id={staff.Id}")">Edit</a> |
            <a href="@($"/staff")">Back to List</a>
        </div>
    }
</div>

@code {
    private Staff? staff;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        staff = await context.Staff.FirstOrDefaultAsync(m => m.Id == Id);

        if (staff is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
