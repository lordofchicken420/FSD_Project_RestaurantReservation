@page "/reviews/create"
@using Microsoft.EntityFrameworkCore
@using FSD_Project.Domain
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject IDbContextFactory<FSD_Project.Data.FSD_ProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>


<PageTitle>Create Review</PageTitle>

<section class="page-background">
    <header>
        <h1>Leave a review</h1>
        <p>We value your feedback. Leave a review to share your experience!</p>
    </header>
    <hr />

    @if (LeftReview == true)
    {
        <div class="alert alert-success alert-dismissable fixed-top" role="alert" id="success-alert" style="max-width:320px; margin: 0 auto; margin-top: 100px">
            Thank you for leaving a review!
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" style="background-color: transparent;"></button>
        </div>
    }

    <div class="review-form">
        <EditForm method="post" Model="Review" OnValidSubmit="AddReview" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="input-field">
                <div class="form-group">
                    <label for="score" class="form-label">Score:</label>
                    <InputNumber id="score" @bind-Value="Review.Score" class="form-control" />
                    <ValidationMessage For="() => Review.Score" class="text-danger" />
                </div>

                <div class="form-group">
                    <label for="comment" class="form-label">Comment:</label>
                    <InputText id="comment" @bind-Value="Review.Comment" class="form-control" />
                    <ValidationMessage For="() => Review.Comment" class="text-danger" />
                </div>

            </div>

            <div class="metadata">

                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Review.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Review.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Review.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Review.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Review.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Review.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Review.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Review.UpdatedBy" class="text-danger" />
                </div>

            </div>

            @if (HasReservation == true)
            {
                <button type="submit" class="btn-container">Submit Review</button>
            }
            @if (HasReservation == false)
            {
                <h4>
                    Please make a reservation before leaving a review
                </h4>
            }
        </EditForm>

        <AuthorizeView Roles="Admin, Staff">
            <div class="back-link">
                <a href="/reviews">Back to Review List</a>
            </div>
        </AuthorizeView>

        <div class="back-link">
            <a href="/">Back to Home</a>
        </div>

    </div>

</section>

@code {
    [SupplyParameterFromForm]
    private Review Review { get; set; } = new();
    private bool HasReservation;
    private bool LeftReview = false;

    protected override async Task OnInitializedAsync()
    {
        // Get the authenticated user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Retrieve UserId from claims
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                using var context = DbFactory.CreateDbContext();

                // Query the Customer table to fetch the CustomerId
                var customer = await context.Customer
                    .FirstOrDefaultAsync(c => c.UserId == userId);

                if (customer != null)
                {
                    // Store the CustomerId
                    var customerId = customer.Id;

                    // Check for the most recent reservation by this customer
                    var reservation = await context.Reservation
                        .Where(r => r.CustomerId == customerId.ToString()) // Convert int to string
                        .OrderByDescending(r => r.DateCreated) // Assuming most recent reservation
                        .FirstOrDefaultAsync();

                    if (reservation != null)
                    {
                        // Set Review properties
                        Review.ReservationId = reservation.Id.ToString();
                        HasReservation = true;
                    }
                    else
                    {
                        HasReservation = false;
                    }

                    // Pre-fill metadata
                    Review.DateCreated = DateTime.Now;
                    Review.CreatedBy = user.Identity.Name;
                }
                else
                {
                    Console.WriteLine("No customer record found for the current user.");
                }
            }
            else
            {
                Console.WriteLine("UserId claim is missing.");
            }
        }
        else
        {
            // Redirect to login if the user is not authenticated
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task AddReview()
    {
        using var context = DbFactory.CreateDbContext();
        Review.DateCreated = DateTime.Now;
        Review.DateUpdated = DateTime.Now;
        context.Reviews.Add(Review);
        await context.SaveChangesAsync();
        LeftReview = true;
        StateHasChanged();
        // NavigationManager.NavigateTo("/reviews");
    }

}