@page "/customerreservation/create"
@using FSD_Project.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.Build.Framework
@using Microsoft.EntityFrameworkCore
@using FSD_Project.Domain
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@using FSD_Project.Data
@using FSD_Project.Services

@inject ILogger<Index> Logger
@inject IDbContextFactory<FSD_Project.Data.FSD_ProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IReservationService ReservationService
@inject IJSRuntime JS

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

<PageTitle>Create</PageTitle>

@if (HasReservation == true)
{
    <div class="alert alert-success alert-dismissable fixed-top" role="alert" id="success-alert" style="max-width:320px; margin: 0 auto; margin-top: 100px">
        You have booked a table! <br />
        An email will be sent to you
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" style="background-color: transparent;"></button>
    </div>
}

@if (TrackedHasReservation == true && TriedBypass == true) {
    <div class="alert alert-danger alert-dismissable fixed-top" role="alert" id="success-alert" style="max-width:320px; margin: 0 auto; margin-top: 100px">
        You have already booked one table.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" style="background-color: transparent;"></button>
    </div>
}

@if (UnauthorizedReservation == true)
{
    <div class="alert alert-danger alert-dismissable fixed-top" role="alert" id="success-alert" style="max-width:320px; margin: 0 auto; margin-top: 100px">
        All Staffs are to make reservations through Admin Pages instead.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" style="background-color: transparent;"></button>
    </div>
}

<header class="navbar">
    <nav>
        <ul class="nav-links">
            <li><button class="nav-button" onclick="window.location.href='/'">Home</button></li>
            <li><button class="nav-button" onclick="window.location.href='/customerreservation/create'">Reservations</button></li>
            <li><button class="nav-button" onclick="window.location.href='/Menu'">Menu</button></li>
            <li>
                <ul class="icon">
                    <li>
                        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="26" class="bi bi-person-fill" viewBox="0 0 16 16">
                            <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6" />
                        </svg>
                    </li>
                    <li>
                        <AuthorizeView>
                            <NotAuthorized>
                                <button class="nav-button login-button" onclick="window.location.href='/Admin'">Login</button>
                            </NotAuthorized>

                            <Authorized>
                                <button class="nav-button logout-button" onclick="window.location.href='/Logout'">Logout</button>
                            </Authorized>
                        </AuthorizeView>
                    </li>
                </ul>
            </li>
        </ul>
    </nav>
</header>

<!-- Reservation Details Section -->
<section class="reservationdescription-section">
    <h2>Reservations</h2>
    <hr />
    <p>February & March are now open! Reservations for April & May open February 1st at 2 PM SGT.</p>
    <p>Join us for a 5-course tasting menu inspired by Athens. Experience Mediterranean flavors and stories rooted in Greek tradition, blending ancient recipes with modern twists.</p>
    <p>We welcome all dietary needs — let us know your preferences 4 days in advance through your dining survey.</p>
</section>

<!-- Reservation Form Section -->
<section class="reservation-section">
    <div class="form-container">
        <div class="form-fields">
            <h3>Book Your Table</h3>
            <hr />
            <h5>
                Each customer may only reserve one table <br />
                and is allocated a two-hour time slot due to high demand.
            </h5>

            <hr />
            <br />
            <EditForm Model="FormModel" OnValidSubmit="AddReservation" FormName="ReservationForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="form-group">
                    <label for="createdby" class="form-label">Your Name:</label>
                    <InputText id="createdby" @bind-Value="FormModel.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => FormModel.CreatedBy" class="text-danger" />
                </div>


                <div class="form-group">
                    <label for="reservationbranch" class="form-label"> Restaurant Branch:</label>
                    <InputSelect id="reservationbranch"
                    @bind-value="FormModel.ReservationBranch"
                    class="form-control">
                        <option value="">Select a branch</option>
                        <option value="1">
                            The Shoppes at Marina Bay Sands
                        </option>
                        <option value="2">
                            Jewel at Changi Airport
                        </option>
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label for="reservationdate" class="form-label">Reservation Date:</label>
                    <InputDate id="reservationdate"
                    @bind-Value="FormModel.ReservationDate"
                    class="form-control" />
                    <ValidationMessage For="() => FormModel.ReservationDate" class="text-danger" />
                </div>

                <div class="form-group">
                    <label for="reservationtime" class="form-label">Reservation Time:</label>
                    <InputSelect id="reservationtime"
                    @bind-Value="FormModel.ReservationTime"
                    class="form-control">
                        <option value="">Select a time</option>
                        @foreach (var time in TimeOptions)
                        {
                            <option value="@time">@time</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => FormModel.ReservationTime" class="text-danger" />
                </div>

                <br />

                <AuthorizeView>
                    <Authorized Context="user">
                        <button type="submit" class="btn-submit">BOOK</button>
                    </Authorized>
                    <NotAuthorized Context="user">
                        <h5 class="error">
                            Please login before reserving a table!
                        </h5>
                    </NotAuthorized>
                </AuthorizeView>

            </EditForm>
        </div>
    </div>

    <section class="current-booking">
        <h3>Your Current Reservation</h3>
        <hr />
        <h5>
            View and amend your current booking.
        </h5>
        <hr />

        <div class="row mb-3">
            <div class="reservation-list">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header text-white">
                            <h5>Reservations List</h5>
                            <h5>__________________</h5>
                        </div>

                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th style="width: 1%;">Reservation ID</th>
                                        <th style="width: 1%;">Your Name</th>
                                        <th style="width: 1%;">Branch Name</th>
                                        <th style="width: 2%;">Reserved Date</th>
                                        <th style="width: 1%;">Table Number</th>
                                        <th style="width: 1%;">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (reservations == null || reservations.Count == 0)
                                    {
                                        <tr>
                                            <td colspan="6" class="text-center text-muted">You do not have any reservations.</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        @foreach (var reservation in reservations)
                                        {
                                            <tr>
                                                <td>@reservation.Id</td>
                                                <td>@reservation.CreatedBy</td>
                                                <td>@GetBranchName(reservation.TableID)</td>
                                                <td>@reservation.ReservedDateTime.ToString("f")</td>
                                                <td>@reservation.TableID</td>
                                                <td>
                                                    <a href="@($"/customerreservation/details?id={reservation.Id}")">Details</a> |
                                                    <a href="@($"customerreservation/delete?id={reservation.Id}")">Delete</a>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <div class="review">
        <h3>
            Leave a Review
        </h3>
        <hr />
        <h5>
            Your feedback lets us serve you better
        </h5>
        <hr />
        <button type="button" class="btn-container" onclick="window.location.href='/reviews/create'">Review</button>
    </div>
</section>

<footer>
    <p>
        © @DateTime.Now.Year Ruben x John. All rights reserved.
    </p>
</footer>

@code {
    [SupplyParameterFromForm]
    private InputModel FormModel { get; set; } = new();
    private List<Customer> customers = new();
    private List<Reservation> reservations = new();
    private Reservation Reservation { get; set; } = new();
    [Inject]
    private ICustomEmailSender<FSD_ProjectUser> EmailSender { get; set; } = default!;
    private string userId;
    private bool HasReservation;
    private bool TrackedHasReservation;
    private bool TriedBypass;
    private bool UnauthorizedReservation;
    private FSD_ProjectContext context = default!;
    private string userEmail;
    private string reservationMessage;

    private List<string> TimeOptions = new List<string>
    {
        "10:00 AM", "10:30 AM", "11:00 AM", "11:30 AM", "12:00 PM", "12:30 PM", "1:00 PM", "1:30 PM",
        "2:00 PM", "2:30 PM", "3:00 PM", "3:30 PM", "4:00 PM", "4:30 PM", "5:00 PM", "5:30 PM",
        "6:00 PM", "6:30 PM", "7:00 PM", "7:30 PM", "8:00 PM", "8:30 PM", "9:00 PM", "9:30 PM", "10:00 PM"
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initialize context regardless of authentication
            context = await DbFactory.CreateDbContextAsync();

            // Set the current date as the default for ReservationDate
            FormModel.ReservationDate = DateTime.Today;

            // Retrieve the authenticated user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                if (!string.IsNullOrEmpty(userId))
                {
                    var customer = await context.Customer
                        .FirstOrDefaultAsync(c => c.UserId == userId);

                    if (customer != null)
                    {
                        var customerId = customer.Id.ToString();
                        reservations = await ReservationService.GetReservationsByCustomerIdAsync(customerId);
                        TrackedHasReservation = await context.Reservation.AnyAsync(r => r.CustomerId == customer.Id.ToString());

                    }
                    else
                    {
                        Logger.LogWarning($"No customer found for user {userId}");
                        reservations = new List<Reservation>();
                    }
                }
                else
                {
                    Logger.LogWarning("UserId claim is missing for authenticated user");
                    reservations = new List<Reservation>();
                }
            }
            else
            {
                Logger.LogInformation("User is not authenticated");
                reservations = new List<Reservation>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnInitializedAsync");
            reservations = new List<Reservation>();
        }
    }

    private async Task AddReservation()
    {
        try
        {
            if (string.IsNullOrEmpty(userId))
            {
                Logger.LogWarning("Attempt to add reservation without authentication");
                return;
            }

            if (context == null)
            {
                context = await DbFactory.CreateDbContextAsync();
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            var customer = await context.Customer
                .FirstOrDefaultAsync(c => c.UserId == userId);

            var isStaff = user.IsInRole("Staff");
            var isAdmin = user.IsInRole("Admin");

            if (isStaff == true || isAdmin == true){
                Logger.LogInformation("Admins and Staff are to access Admin Pages to make reservations instead");
                UnauthorizedReservation = true;
                return;
            }

            if (customer == null)
            {
                Logger.LogWarning($"No customer found for user {userId}");
                return;
            }

            // Set Time if not already set
            Reservation.Time = FormModel.ReservationTime ?? "12:00 PM"; // Default to "12:00 PM" if null
                                                                        // Combine Date and Time for ReservedDateTime
            var dateTimeString = $"{FormModel.ReservationDate:yyyy-MM-dd} {Reservation.Time}";
            Reservation.ReservedDateTime = DateTime.Parse(dateTimeString);
            Reservation.CustomerId = customer.Id.ToString();
            Reservation.CreatedBy = FormModel.CreatedBy;
            Reservation.UpdatedBy = userId;
            Reservation.DateCreated = DateTime.Now;
            Reservation.DateUpdated = DateTime.Now;
            TrackedHasReservation = await context.Reservation.AnyAsync(r => r.CustomerId == customer.Id.ToString());

            if (TrackedHasReservation==false){
                // Creating new reservation
                var success = await ReservationService.CreateReservationAsync(Reservation, FormModel.ReservationBranch);
                if (success)
                {
                    HasReservation = true;
                    var projectUser = await context.Users
                        .FirstOrDefaultAsync(u => u.Id == userId) as FSD_ProjectUser;  // Cast to FSD_ProjectUser

                    if (projectUser != null)  // Add null check
                    {
                        userEmail = customer.Email;
                        reservationMessage = "You have reserved a table.";
                        reservations = await ReservationService.GetReservationsByCustomerIdAsync(customer.Id.ToString());
                        await EmailSender.SendReservationConfirmation(projectUser, userEmail, reservationMessage, Reservation.ReservedDateTime.ToString());
                        StateHasChanged();
                    }
                    else
                    {
                        Logger.LogError("Could not find user as FSD_ProjectUser");
                    }
                }
            }

            else if (TrackedHasReservation==true){
                TriedBypass = true;
                Logger.LogInformation("You can only book one table.");
            }
            

            
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in AddReservation");
        }
    }

    private string GetBranchName(int tableId)
    {
        // TableID 1-5 -> Branch 1, TableID 6-10 -> Branch 2
        if (tableId >= 1 && tableId <= 5)
        {
            return "The Shoppes at Marina Bay Sands";
        }
        else if (tableId >= 6 && tableId <= 10)
        {
            return "Jewel at Changi Airport";
        }
        else
        {
            return "Unknown Branch"; // In case of unexpected tableId
        }
    }

    private sealed class InputModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Reservation's Date is required")]
        public DateTime ReservationDate { get; set; }

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Reservation's Time is required")]
        public string ReservationTime { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Name is required")]
        public string CreatedBy { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Name is required")]
        public string ReservationBranch { get; set; } = string.Empty;
    }
}

