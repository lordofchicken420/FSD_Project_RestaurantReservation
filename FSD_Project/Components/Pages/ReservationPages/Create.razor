
@page "/reservations/create"
@using FSD_Project.Services
@using Microsoft.Build.Framework
@using Microsoft.EntityFrameworkCore
@using FSD_Project.Domain
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@using FSD_Project.Data
@inject ILogger<Index> Logger
@inject IDbContextFactory<FSD_Project.Data.FSD_ProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IReservationService ReservationService
@using Microsoft.AspNetCore.Authorization


@attribute [Authorize(Roles = "Admin, Staff")]


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

<PageTitle>Create</PageTitle>

@if (HasReservation == true)
{
    <div class="alert alert-success alert-dismissable fixed-top" role="alert" id="success-alert" style="max-width:320px; margin: 0 auto; margin-top: 100px">
        You have booked a table! <br />
        An email will be sent to you
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" style="background-color: transparent;"></button>
    </div>
}


<header class="navbar">
    <nav>
        <ul class="nav-links">
            <li><button class="nav-button" onclick="window.location.href='/'">Home</button></li>
            <li><button class="nav-button" onclick="window.location.href='/staffpage'">Dashboard</button></li>
            <li><button class="nav-button" onclick="window.location.href='/Menu'">Menu</button></li>
            <li>
                <ul class="icon">
                    <li>


                        <button class="nav-button logout-button" onclick="window.location.href='/Logout'">Logout</button>
                    </li>
                </ul>
            </li>
        </ul>
    </nav>
</header>


@* All of Create's fields *@
@* ReservedDateTime *@
@* Name *@
@* DateCreated (Hidden) *@
@* DateUpdated (Hidden) *@

<!-- Reservation Form Section -->
<section class="reservation-section">
    <div class="form-container">
        <div class="form-fields">
            <h3>Book Your Table</h3>
            <hr />
            <h5>
                Each reservation is limited to booking only one table <br />
                and is allocated a two-hour time slot.
            </h5>


            <hr />
            <br />
            <EditForm Model="FormModel" OnValidSubmit="AddReservation" FormName="ReservationForm">

                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="form-group">
                    <label for="createdby" class="form-label">Customer's Name:</label>
                    <InputText id="createdby" @bind-Value="FormModel.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => FormModel.CreatedBy" class="text-danger" />
                </div>

                <div class="form-group">
                    <label for="reservationbranch" class="form-label"> Restaurant Branch:</label>
                    <InputSelect id="reservationbranch"
                                 @bind-value="FormModel.ReservationBranch"
                                 class="form-control">
                        <option value="">Select a branch</option>
                        <option value="1">
                            The Shoppes at Marina Bay Sands
                        </option>
                        <option value="2">
                            Jewel at Changi Airport
                        </option>
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label for="reservationdate" class="form-label">Reservation Date:</label>
                    <InputDate id="reservationdate"
                               @bind-Value="FormModel.ReservationDate"
                               class="form-control" />
                    <ValidationMessage For="() => FormModel.ReservationDate" class="text-danger" />
                </div>

                <div class="form-group">
                    <label for="reservationtime" class="form-label">Reservation Time:</label>
                    <InputSelect id="reservationtime"
                                 @bind-Value="FormModel.ReservationTime"
                                 class="form-control">
                        <option value="">Select a time</option>
                        @foreach (var time in TimeOptions)
                        {
                            <option value="@time">@time</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => FormModel.ReservationTime" class="text-danger" />
                </div>

                


                @* <div class="form-group"> *@
                @*     <label for="updatedby" class="form-label">UpdatedBy:</label> *@
                @*     <InputText id="updatedby" @bind-Value="Reservation.UpdatedBy" class="form-control" /> *@
                @*     <ValidationMessage For="() => Reservation.UpdatedBy" class="text-danger" /> *@
                @* </div> *@



                <br />

               
                <div class="form-group">
                    <label for="customerid" class="form-label">CustomerId:</label>
                    <InputText id="customerid" @bind-Value="FormModel.CustomerId" class="form-control" />
                    <ValidationMessage For="() => FormModel.CustomerId" class="text-danger" />
                </div>


                <button type="submit" class="btn-submit" onclick="window.location.href='/staffpage'">BOOK </button>

                <div class="useless">

                    <div class="form-group">
                        <label for="datecreated" class="form-label">DateCreated:</label>
                        <InputDate id="datecreated" @bind-Value="Reservation.DateCreated" class="form-control" />
                        <ValidationMessage For="() => Reservation.DateCreated" class="text-danger" />
                    </div>

                    <div class="form-group">
                        <label for="dateupdated" class="form-label">DateUpdated:</label>
                        <InputDate id="dateupdated" @bind-Value="Reservation.DateUpdated" class="form-control" />
                        <ValidationMessage For="() => Reservation.DateUpdated" class="text-danger" />
                    </div>
                </div>

            </EditForm>
        </div>
    </div>

</section>





@code {
    [SupplyParameterFromForm]
    private InputModel FormModel { get; set; } = new InputModel
        {
            ReservationDate = DateTime.Today // Set default value here
        };
    private List<Customer> customers = new();
    private List<Reservation> reservations = new();
    private Reservation Reservation { get; set; } = new();
    private string userId;
    private bool HasReservation;
    private FSD_ProjectContext context = default!;


    private List<string> TimeOptions = new List<string>
    {
        "10:00 AM", "10:30 AM", "11:00 AM", "11:30 AM", "12:00 PM", "12:30 PM", "1:00 PM", "1:30 PM",
        "2:00 PM", "2:30 PM", "3:00 PM", "3:30 PM", "4:00 PM", "4:30 PM", "5:00 PM", "5:30 PM",
        "6:00 PM", "6:30 PM", "7:00 PM", "7:30 PM", "8:00 PM", "8:30 PM", "9:00 PM", "9:30 PM", "10:00 PM"
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initialize context regardless of authentication
            context = await DbFactory.CreateDbContextAsync();

            //FormModel.ReservationDate = DateTime.Today;

            // Retrieve the authenticated user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                // Store userId in the class-level field
                userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                if (!string.IsNullOrEmpty(userId))
                {
                    // Query the Customer table to fetch the CustomerId
                    var customer = await context.Customer
                        .FirstOrDefaultAsync(c => c.UserId == userId);



                    if (customer != null)
                    {
                        var customerId = customer.Id.ToString();
                        reservations = await ReservationService.GetReservationsByCustomerIdAsync(customerId);

                    }
                    else
                    {
                        Logger.LogWarning($"No customer found for user {userId}");
                        reservations = new List<Reservation>();
                    }
                }
                else
                {
                    Logger.LogWarning("UserId claim is missing for authenticated user");
                    reservations = new List<Reservation>();
                }
            }
            else
            {
                Logger.LogInformation("User is not authenticated");
                reservations = new List<Reservation>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnInitializedAsync");
            reservations = new List<Reservation>();
        }
    }

    private async Task AddReservation()
    {
        try
        {
            if (string.IsNullOrEmpty(userId))
            {
                Logger.LogWarning("Attempt to add reservation without authentication");
                return;
            }

            // Ensure context is available
            if (context == null)
            {
                context = await DbFactory.CreateDbContextAsync();
            }

            // Retrieve the authenticated user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Retrieve the Customer record associated with the logged-in user's AspNetUser Id
            var customer = await context.Customer
                .FirstOrDefaultAsync(c => c.UserId == userId);

            var isStaff = user.IsInRole("Staff");
            var isAdmin = user.IsInRole("Admin");




            if (customer != null)
            {
                // Set Time if not already set
                Reservation.Time = FormModel.ReservationTime ?? "12:00 PM"; // Default to "12:00 PM" if null
                                                                            // Combine Date and Time for ReservedDateTime
                var dateTimeString = $"{FormModel.ReservationDate:yyyy-MM-dd} {Reservation.Time}";
                Reservation.ReservedDateTime = DateTime.Parse(dateTimeString);
                Reservation.CustomerId = customer.Id.ToString();
                Reservation.CreatedBy = FormModel.CreatedBy;
                Reservation.UpdatedBy = userId;
                Reservation.DateCreated = DateTime.Now;
                Reservation.DateUpdated = DateTime.Now;


            }

            else if (isStaff|| isAdmin)
            {
                // Set Time if not already set
                Reservation.Time = FormModel.ReservationTime ?? "12:00 PM"; // Default to "12:00 PM" if null
                                                                            // Combine Date and Time for ReservedDateTime
                var dateTimeString = $"{FormModel.ReservationDate:yyyy-MM-dd} {Reservation.Time}";
                Reservation.ReservedDateTime = DateTime.Parse(dateTimeString);
                Reservation.CustomerId = FormModel.CustomerId;
                Reservation.CreatedBy = FormModel.CreatedBy;
                Reservation.UpdatedBy = userId;
                Reservation.DateCreated = DateTime.Now;
                Reservation.DateUpdated = DateTime.Now;

            }

            // Call the service to create the reservation
            var success = await ReservationService.CreateReservationAsync(Reservation, FormModel.ReservationBranch);

            if (success)
            {
                HasReservation = true;
                // Refresh the reservations list
                if (customer != null)
                {
                    reservations = await ReservationService.GetReservationsByCustomerIdAsync(customer.Id.ToString());
                }

                else if (isStaff || isAdmin)
            {
                    HasReservation = true;

                    //???
                }
                StateHasChanged();
            }
            else
            {
                Logger.LogWarning("No available tables for reservation");
            }


        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in AddReservation");
        }
    }

    private sealed class InputModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Reservation's Date is required")]
        public DateTime ReservationDate { get; set; }

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Reservation's Time is required")]
        public string ReservationTime { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Name is required")]
        public string CreatedBy { get; set; } = string.Empty;
    

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "CustomerId is required")]
        public string CustomerId { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Name is required")]
        public string ReservationBranch { get; set; } = string.Empty;
    }
}