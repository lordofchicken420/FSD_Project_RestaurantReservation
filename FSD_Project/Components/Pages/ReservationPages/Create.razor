@page "/reservations/create"
@using FSD_Project.Services
@using Microsoft.Build.Framework
@using Microsoft.EntityFrameworkCore
@using FSD_Project.Domain
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@using FSD_Project.Data
@inject ILogger<Index> Logger
@inject IDbContextFactory<FSD_Project.Data.FSD_ProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IReservationService ReservationService

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

<PageTitle>Create</PageTitle>

@if (HasReservation == true){
    <div class="alert alert-success alert-dismissable fixed-top" role="alert" id="success-alert" style="max-width:320px; margin: 0 auto; margin-top: 100px">
        You have booked a table! <br />
        An email will be sent to you
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" style="background-color: transparent;"></button>
    </div>
}


<header class="navbar">
    <nav>
        <ul class="nav-links">
            <li><button class="nav-button" onclick="window.location.href='/'">Home</button></li>
            <li><button class="nav-button" onclick="window.location.href='/reservations/create'">Reservations</button></li>
            <li><button class="nav-button" onclick="window.location.href='/Menu'">Menu</button></li>
            <li>
                <ul class="icon">
                    <li>
                        <svg xmlns="http://www.w3.org/2000/svg" width="30" height="26" class="bi bi-person-fill" viewBox="0 0 16 16">
                            <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6" />
                        </svg>
                    </li>
                    <li>
                        <AuthorizeView>
                            <NotAuthorized>
                                <button class="nav-button login-button" onclick="window.location.href='/Admin'">Login</button>
                            </NotAuthorized>

                            <Authorized>
                                <button class="nav-button logout-button" onclick="window.location.href='/Logout'">Logout</button>
                            </Authorized>
                        </AuthorizeView>
                    </li>
                </ul>
            </li>
        </ul>
    </nav>
</header>

<!-- Reservation Details Section -->
<section class="reservation-section">
    <h2>Reservations</h2>
    <hr />
    <p>February & March are now open! Reservations for April & May open February 1st at 2 PM SGT.</p>
    <p>Join us for a 5-course tasting menu inspired by Athens. Experience Mediterranean flavors and stories rooted in Greek tradition, blending ancient recipes with modern twists.</p>
    <p>We welcome all dietary needs — let us know your preferences 4 days in advance through your dining survey.</p>
</section>

@* All of Create's fields *@
@* ReservedDateTime *@
@* Name *@
@* DateCreated (Hidden) *@
@* DateUpdated (Hidden) *@

<!-- Reservation Form Section -->
<section class="reservation-section">
    <div class="form-container">
        <div class="form-fields">
            <h3>Book Your Table</h3>
            <hr />
            <h5>
                Each reservation is limited to booking only one table <br />
                and is allocated a two-hour time slot.
            </h5>


            <hr />
            <br />
            <EditForm Model="FormModel" OnValidSubmit="AddReservation" FormName="ReservationForm">

                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="form-group">
                    <label for="reserveddatetime" class="form-label">Reservation Date & Time:</label>
                    <InputText id="reserveddatetime"
                    @bind-Value="FormModel.ReservationDateTimeString"
                    type="datetime-local"
                    class="form-control" />
                    <ValidationMessage For="() => FormModel.ReservationDateTimeString" class="text-danger" />
                </div>

                <div class="form-group">
                    <label for="createdby" class="form-label">Your Name:</label>
                    <InputText id="createdby" @bind-Value="FormModel.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => FormModel.CreatedBy" class="text-danger" />
                </div>


                @* <div class="form-group"> *@
                @*     <label for="updatedby" class="form-label">UpdatedBy:</label> *@
                @*     <InputText id="updatedby" @bind-Value="Reservation.UpdatedBy" class="form-control" /> *@
                @*     <ValidationMessage For="() => Reservation.UpdatedBy" class="text-danger" /> *@
                @* </div> *@



                <br />

                <AuthorizeView>
                    <Authorized Context="gay">
                        <button type="submit" class="btn-submit">BOOK</button>
                    </Authorized>
                    <NotAuthorized Context="gay">
                        <h5 class="error">
                            Please login before reserving a table!
                        </h5>
                    </NotAuthorized>

                </AuthorizeView>


                <div class="useless">
                    <div class="form-group">
                        <label for="customerid" class="form-label">CustomerId:</label>
                        <InputText id="customerid" @bind-Value="Reservation.CustomerId" class="form-control" />
                        <ValidationMessage For="() => Reservation.CustomerId" class="text-danger" />
                    </div>

                    <div class="form-group">
                        <label for="datecreated" class="form-label">DateCreated:</label>
                        <InputDate id="datecreated" @bind-Value="Reservation.DateCreated" class="form-control" />
                        <ValidationMessage For="() => Reservation.DateCreated" class="text-danger" />
                    </div>

                    <div class="form-group">
                        <label for="dateupdated" class="form-label">DateUpdated:</label>
                        <InputDate id="dateupdated" @bind-Value="Reservation.DateUpdated" class="form-control" />
                        <ValidationMessage For="() => Reservation.DateUpdated" class="text-danger" />
                    </div>
                </div>

            </EditForm>
        </div>
    </div>

    <section class="current-booking">
        <h3>Your Current Booking</h3>
        <hr />
        <h5>
            View and amend your current booking.
        </h5>
        <hr />
        <div class="row mb-3">
            <div class="reservation-list">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header text-white">
                            <h5>Reservations List</h5>
                        </div>
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th style="width: 1%;">Reservation ID</th>
                                        <th style="width: 1%;">Customer Name</th>
                                        <th style="width: 2%;">Reserved Date</th>
                                        <th style="width: 1%;">Table Number</th>
                                        <th style="width: 1%;">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (reservations == null || reservations.Count == 0)
                                    {
                                        <tr>
                                            <td colspan="6" class="text-center text-muted">No reservations available.</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        @foreach (var reservation in reservations)
                                        {
                                            <tr>
                                                <td>@reservation.Id</td>
                                                <td>@reservation.CreatedBy</td>
                                                <td>@reservation.ReservedDateTime.ToString("f")</td>
                                                <td>@reservation.TableID</td>
                                                <td>
                                                    <a href="@($"reservations/edit?id={reservation.Id}")">Edit</a> |
                                                    <a href="@($"reservations/details?id={reservation.Id}")">Details</a> |
                                                    <a href="@($"reservations/delete?id={reservation.Id}")">Delete</a>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <div class="review">
        <h3>
            Leave a Review
        </h3>
        <hr />
        <h5>
            Your feedback lets us serve you better
        </h5>
        <hr />
        <button type="button" class="btn-container" onclick="window.location.href='/reviews/create'">Review</button>
    </div>
</section>



<footer>
    <p>
        © @DateTime.Now.Year Ruben x John. All rights reserved.
        <!--
        <a href="/Admin" style="color: #FFFFFF; text-decoration: underline; margin-left: 10px;">Admin Page</a>
        -->
    </p>
</footer>



@code {
    [SupplyParameterFromForm]
    private InputModel FormModel { get; set; } = new();
    private List<Customer> customers = new();
    private List<Reservation> reservations = new();
    private Reservation Reservation { get; set; } = new();
    private string userId;
    private bool HasReservation;
    private FSD_ProjectContext context = default!;


    protected override async Task OnInitializedAsync()
    {
        // Retrieve the authenticated user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Retrieve UserId (AspNetUser Id) from claims
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                // Ensure the DbContext is initialized
                context = await DbFactory.CreateDbContextAsync();

                // Query the Customer table to fetch the CustomerId
                var customer = await context.Customer
                    .FirstOrDefaultAsync(c => c.UserId == userId);

                if (customer != null)
                {
                    var customerId = customer.Id.ToString(); // Convert int to string

                    // Fetch reservations for this customer using the service
                    reservations = await ReservationService.GetReservationsByCustomerIdAsync(customerId);
                }
                else
                {
                    Console.WriteLine("No matching customer found for the logged-in user.");
                    reservations = new List<Reservation>();
                }
            }
            else
            {
                Console.WriteLine("UserId claim is missing.");
                reservations = new List<Reservation>();
            }
        }
        else
        {
            Console.WriteLine("User is not authenticated.");
            reservations = new List<Reservation>();
        }
    }


    private async Task AddReservation()
    {
        if (string.IsNullOrEmpty(userId)) return; // Prevent unauthenticated users from booking

        // Retrieve the Customer record associated with the logged-in user's AspNetUser Id
        var customer = await context.Customer
            .FirstOrDefaultAsync(c => c.UserId == userId);


        if (customer != null)
        {
            // Map FormModel to Reservation
            Reservation.ReservedDateTime = DateTime.Parse(FormModel.ReservationDateTimeString);
            Reservation.CustomerId = customer.Id.ToString(); // Convert int to string
            Reservation.CreatedBy = FormModel.CreatedBy; // Use the name from the form
            Reservation.UpdatedBy = userId; // Use the logged-in user's ID
            Reservation.DateCreated = DateTime.Now;
            Reservation.DateUpdated = DateTime.Now;
        }
        else
        {
            Logger.LogInformation("Customer is null. Cannot create reservation.");
            // Handle the null case appropriately (e.g., show an error message or stop execution)
        }


        // Call the service to create the reservation
        var success = await ReservationService.CreateReservationAsync(Reservation);

        if (success)
        {
            HasReservation = true;
        }
        else
        {
            Logger.LogInformation("No available tables.");
        }
    }

    private sealed class InputModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Reservation's Date and Time is required")]
        public string ReservationDateTimeString { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Name is required")]
        public string CreatedBy { get; set; } = string.Empty;
    }
}
