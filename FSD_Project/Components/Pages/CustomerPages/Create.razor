@page "/customers/create"
@using Microsoft.EntityFrameworkCore
@using FSD_Project.Domain
@using FSD_Project.Data
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<FSD_Project.Data.FSD_ProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<FSD_ProjectUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Customer</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Customer" OnValidSubmit="AddCustomer" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Customer.Name" class="form-control" /> 
                <ValidationMessage For="() => Customer.Name" class="text-danger" /> 
            </div>        

            <div class="mb-3">
                <label for="gender" class="form-label">Gender:</label>
                <InputSelect id="gender" @bind-Value="Customer.Gender" class="form-control">
                    <option value="" disabled>Select Gender</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                    <option value="Other">Other</option>
                </InputSelect>
                <ValidationMessage For="() => Customer.Gender" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <InputText id="email" @bind-Value="Customer.Email" class="form-control" />
                <ValidationMessage For="() => Customer.Email" class="text-danger" />
            </div>


            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText id="password" type="password" @bind-Value="Password" class="form-control" />
                <ValidationMessage For="() => Password" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="confirmPassword" class="form-label">Confirm Password:</label>
                <InputText id="confirmPassword" type="password" @bind-Value="ConfirmPassword" class="form-control" />
                <ValidationMessage For="() => ConfirmPassword" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Customer.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Customer.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="Customer.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => Customer.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="Customer.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => Customer.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="Customer.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => Customer.UpdatedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/customers">Back to List</a>
</div>



@code {
    [SupplyParameterFromForm]
    private Customer Customer { get; set; } = new();
    private string Password { get; set; } = string.Empty;
    private string ConfirmPassword { get; set; } = string.Empty;


    private async Task AddCustomer()
    {
        using var context = DbFactory.CreateDbContext();
        Customer.DateCreated = DateTime.UtcNow;
        Customer.DateUpdated = DateTime.UtcNow;

        if (Password != ConfirmPassword)
        {
            Console.WriteLine("Passwords do not match.");
            return;
        }


        // Check if a user with the same email exists
        var existingUser = await UserManager.FindByEmailAsync(Customer.Email);
        if (existingUser == null)
        {
            // Create new identity user
            var user = new FSD_ProjectUser
                {
                    UserName = Customer.Email, // Using email as username
                    Email = Customer.Email
                };

            // Create user with a default password
            var password = "DefaultPassword123!"; // Change this or generate dynamically
            var result = await UserManager.CreateAsync(user, password);

            if (!result.Succeeded)
            {
                // Handle user creation errors (e.g., log and show error message)
                Console.WriteLine($"User creation failed: {string.Join(", ", result.Errors.Select(e => e.Description))}");
                return;
            }

            // Assign "User" role if it doesn't exist
            if (!await RoleManager.RoleExistsAsync("User"))
            {
                await RoleManager.CreateAsync(new IdentityRole("User"));
            }
            await UserManager.AddToRoleAsync(user, "User");

            // Assign UserId to Customer
            Customer.UserId = user.Id;
        }
        else
        {
            // If user already exists, link it to Customer
            Customer.UserId = existingUser.Id;
        }

        // Save Customer in database
        context.Customer.Add(Customer);
        await context.SaveChangesAsync();

        // Redirect back to customers list
        NavigationManager.NavigateTo("/customers");
    }
}

