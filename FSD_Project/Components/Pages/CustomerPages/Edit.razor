@page "/customers/edit"
@using Microsoft.EntityFrameworkCore
@using FSD_Project.Domain
@using FSD_Project.Data
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Roles = "Admin, Staff")]

@inject IDbContextFactory<FSD_Project.Data.FSD_ProjectContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<FSD_ProjectUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Customer</h2>
<hr />
@if (Customer is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Customer" OnValidSubmit="UpdateCustomer" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Customer.Id" value="@Customer.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Customer.Name" class="form-control" />
                    <ValidationMessage For="() => Customer.Name" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="gender" class="form-label">Gender:</label>
                    <InputSelect id="gender" @bind-Value="Customer.Gender" class="form-control">
                        <option value="" disabled>Select Gender</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                        <option value="Other">Other</option>
                    </InputSelect>
                    <ValidationMessage For="() => Customer.Gender" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">New Password:</label>
                    <InputText id="password" type="password" @bind-Value="Password" class="form-control" />
                    <ValidationMessage For="() => Password" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">Confirm Password:</label>
                    <InputText id="confirmPassword" type="password" @bind-Value="ConfirmPassword" class="form-control" />
                    <ValidationMessage For="() => ConfirmPassword" class="text-danger" />
                </div>



                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Customer.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Customer.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Customer.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Customer.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Customer.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Customer.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Customer.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Customer.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/customers">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Customer? Customer { get; set; }

    private string Password { get; set; } = string.Empty;
    private string ConfirmPassword { get; set; } = string.Empty;
    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Customer ??= await context.Customer.FirstOrDefaultAsync(m => m.Id == Id);

        if (Customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateCustomer()
    {
        using var context = DbFactory.CreateDbContext();

        // Check if a new password is provided
        if (!string.IsNullOrWhiteSpace(Password))
        {
            if (Password != ConfirmPassword)
            {
                ErrorMessage = "Passwords do not match.";
                return;
            }

            // Fetch the associated user in the AspNetUsers table
            var user = await UserManager.FindByIdAsync(Customer!.UserId);
            if (user == null)
            {
                ErrorMessage = "User not found in the Identity database.";
                return;
            }

            // Generate a password reset token and reset the password
            var resetToken = await UserManager.GeneratePasswordResetTokenAsync(user);
            var passwordResult = await UserManager.ResetPasswordAsync(user, resetToken, Password);

            if (!passwordResult.Succeeded)
            {
                ErrorMessage = $"Password update failed: {string.Join(", ", passwordResult.Errors.Select(e => e.Description))}";
                return;
            }
        }

        // Update customer details
        context.Attach(Customer!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CustomerExists(Customer!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/customers");
    }

    private bool CustomerExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Customer.Any(e => e.Id == id);
    }
}