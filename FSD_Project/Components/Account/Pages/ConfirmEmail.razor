@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FSD_Project.Data

@inject UserManager<FSD_ProjectUser> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm Email</PageTitle>

<div class="confirmation-container">
    <h1 class="title">Confirm Email</h1>

    <div class="status-message">
        <p>@statusMessage</p>
    </div>

    <div class="manual-redirect" style="text-align: center; margin-top: 20px;">
        <button class="redirect-button" onclick="window.location.href='/Login'">Go to Login</button>
    </div>
</div>

<style>
    .confirmation-container {
        max-width: 600px;
        margin: 50px auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
        font-family: Arial, sans-serif;
    }
    .title {
        text-align: center;
        font-size: 24px;
        color: #333;
    }
    .status-message {
        text-align: center;
        font-size: 18px;
        color: #333;
    }
    .redirect-button {
        padding: 10px 20px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }
    .redirect-button:hover {
        background-color: #218838;
    }
</style>

@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error loading user with ID {UserId}";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            statusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
        }
    }

    
}