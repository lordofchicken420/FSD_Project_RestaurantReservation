@page "/Logout"
@using Microsoft.AspNetCore.Identity
@using FSD_Project.Data
@inject SignInManager<FSD_ProjectUser> SignInManager
@inject ILogger<Logout> Logger
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Logout - Athens</PageTitle>

<div class="logout-container">
    <header>
        <h1>Athens.</h1>
        <p class="paragraph">Your choice of premium Greek food.</p>
    </header>

    <div class="row">
        <div class="col-md-4">
            <section>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
                    <div class="submit-button-container">
                        <button type="submit" class="btn btn-primary">Confirm Logout</button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelLogout">Cancel</button>
                    </div>
                </form>
            </section>
        </div>
    </div>

    <footer>
        <small><i>Copyright &copy; 2024 Ruben x John</i></small>
    </footer>
</div>

<style>
    .logout-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    header {
        text-align: center;
        margin-bottom: 2rem;
    }

        header h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }

    .paragraph {
        font-size: 1.2rem;
        color: #666;
    }

    .submit-button-container {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin: 1rem 0;
    }

    footer {
        text-align: center;
        margin-top: 3rem;
        color: #666;
    }
</style>

@code {
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private void CancelLogout()
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri, forceLoad: true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set 'userLoggedOut' to true in localStorage when the user logs out
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userLoggedOut", "true");

            // Log out the user
            await SignInManager.SignOutAsync();

            // Navigate back to the home page after logout
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
    }
}
