@page "/Registration"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FSD_Project.Data
@using FSD_Project.Domain;
@inject FSD_ProjectContext DbContext
@inject ILogger<Index> Logger

@using System.Security.Claims;


@inject UserManager<FSD_ProjectUser> UserManager
@inject IUserStore<FSD_ProjectUser> UserStore
@inject SignInManager<FSD_ProjectUser> SignInManager
@inject IEmailSender<FSD_ProjectUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager


<PageTitle>Registration</PageTitle>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<div class="page-background">
<div class="alert">
    <div id="liveAlertPlaceholder"></div>
</div>

<header>
    <h1>Athens.</h1>
</header>
<p class="paragraph">Your choice of premium Greek food.</p>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2 class="subheading">Register</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-container">
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control text-field" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Username" class="form-control text-field" autocomplete="username" aria-required="true" placeholder="username" />
                    <label for="username">Username</label>
                    <ValidationMessage For="() => Input.Username" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control text-field" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control text-field" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="confirm-password">Confirm Password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
                <div class="submit-button-container">
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
                </div>
            </div>
        </EditForm>
    </div>
    @*     <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div> *@
</div>

<div class="button-container">
    <button type="button" class="btn btn-secondary" onclick="window.location.href='/Login'">Login</button>
</div>
<div class="login-button-container">
    <button type="button" class="btn btn-secondary" onclick="window.location.href='/Admin'">Back</button>
</div>

<footer>
    <small><i>Copyright &copy; 2025 Ruben x John</i></small>
</footer>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private readonly FSD_ProjectContext _dbContext; // Declare the instance variable

    private string? ErrorMessage { get; set; }



    public async Task RegisterUser(EditContext editContext)
    {
        // Validate email domain
        string email = Input.Email;
        string[] allowedDomains = { "gmail.com", "yahoo.com", "hotmail.com", "icloud.com", "outlook.com" };

        if (!allowedDomains.Any(domain => email.EndsWith(domain, StringComparison.OrdinalIgnoreCase)))
        {
            identityErrors = new[] { new IdentityError { Description = "This is not a valid email format." } };
            return;
        }

        // Validate username length
        if (Input.Username.Length < 3)
        {
            identityErrors = new[] { new IdentityError { Description = "Username must have a minimum length of 3 characters." } };
            return;
        }

        // Check for duplicate email
        var existingUser = await UserManager.FindByEmailAsync(Input.Email);
        if (existingUser != null)
        {
            identityErrors = new[] { new IdentityError { Description = "A user with this email address already exists." } };
            return;
        }

        // Create user instance
        var user = CreateUser();
        await UserStore.SetUserNameAsync(user, Input.Username, CancellationToken.None);

        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        user.UserName = Input.Username; // Set username explicitly

        // Create user in AspNetUsers
        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            identityErrors = result.Errors; // Capture errors if user creation fails
            return;
        }

        // Add custom claims after user is createdS
        await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim(ClaimTypes.NameIdentifier, user.Id)); // Standard claim for user ID
        await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("userId", user.Id)); // Custom claim (optional, if you need it for other logic)
        
        // Re-sign the user to ensure claims are part of the authentication cookie/session
        await SignInManager.SignInAsync(user, isPersistent: false);

        var result1 = await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim(ClaimTypes.NameIdentifier, user.Id));
        var result2 = await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("userId", user.Id));

        if (!result1.Succeeded || !result2.Succeeded)
        {
            Logger.LogInformation("Failed to add claims.");
            foreach (var error in result1.Errors.Concat(result2.Errors))
            {
                Logger.LogInformation($"Error: {error.Description}");
            }
        }
        else
        {
            Logger.LogInformation("Claims added successfully.");
        }

        var claims = await UserManager.GetClaimsAsync(user);

        
        foreach (var claim in claims)
        {
            Logger.LogInformation($"Claim Type: {claim.Type}, Claim Value: {claim.Value}");
        }

        // Create the "User" role if it doesn't exist and assign the user
        if (!await RoleManager.RoleExistsAsync("User"))
        {
            await RoleManager.CreateAsync(new IdentityRole("User"));
        }
        await UserManager.AddToRoleAsync(user, "User");

        Logger.LogInformation("User created a new account with password.");

        // Add the user to the Customer table
        try
        {
            var customer = new Customer
                {
                    Name = Input.Username,
                    Email = Input.Email,
                    Gender = "Not Specified", // Default gender value; can be customized
                    UserId = user.Id, // Link to AspNetUser
                    DateCreated = DateTime.Now,
                    DateUpdated = DateTime.Now,
                    CreatedBy = Input.Username,
                    UpdatedBy = Input.Email
                };

            DbContext.Customer.Add(customer);
            await DbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError("Error creating customer record: {0}", ex.Message);
            identityErrors = new[] { new IdentityError { Description = "User registered but customer record could not be created." } };
            return;
        }

        // Send email confirmation link
        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "/Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        // Sign in the user and redirect
        ErrorMessage = null;
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }



    private FSD_ProjectUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<FSD_ProjectUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(FSD_ProjectUser)}'. " +
                $"Ensure that '{nameof(FSD_ProjectUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<FSD_ProjectUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<FSD_ProjectUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(20, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 3)]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";


        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 8)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}